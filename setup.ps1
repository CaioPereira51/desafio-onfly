# Sistema de Gest√£o de Pedidos de Viagem Corporativa - Setup PowerShell
# Encoding: UTF-8

Write-Host "üöÄ Iniciando setup do Sistema de Gest√£o de Pedidos de Viagem Corporativa" -ForegroundColor Cyan
Write-Host "==================================================================" -ForegroundColor Cyan

# Verificar se o Docker est√° instalado
try {
    $dockerVersion = docker --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
    } else {
        throw "Docker n√£o encontrado"
    }
} catch {
    Write-Host "‚ùå Docker n√£o est√° instalado. Por favor, instale o Docker primeiro." -ForegroundColor Red
    Write-Host "   Visite: https://docs.docker.com/get-docker/" -ForegroundColor Yellow
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar se o Docker Compose est√° instalado
try {
    $composeVersion = docker-compose --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Docker Compose encontrado: $composeVersion" -ForegroundColor Green
    } else {
        throw "Docker Compose n√£o encontrado"
    }
} catch {
    Write-Host "‚ùå Docker Compose n√£o est√° instalado." -ForegroundColor Red
    Write-Host "   Visite: https://docs.docker.com/compose/install/" -ForegroundColor Yellow
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Verificar se o Docker est√° rodando
try {
    docker info 2>$null | Out-Null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Docker est√° rodando" -ForegroundColor Green
    } else {
        throw "Docker n√£o est√° rodando"
    }
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro." -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Copiar arquivos de ambiente se n√£o existirem
if (!(Test-Path "api\.env")) {
    Write-Host "üìù Copiando arquivo de ambiente da API..." -ForegroundColor Yellow
    Copy-Item "api\env.example" "api\.env"
    Write-Host "‚úÖ Arquivo .env da API criado" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Arquivo .env da API j√° existe" -ForegroundColor Green
}

if (!(Test-Path "frontend\.env")) {
    Write-Host "üìù Copiando arquivo de ambiente do frontend..." -ForegroundColor Yellow
    Copy-Item "frontend\env.example" "frontend\.env"
    Write-Host "‚úÖ Arquivo .env do frontend criado" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Arquivo .env do frontend j√° existe" -ForegroundColor Green
}

# Construir e iniciar os containers
Write-Host "üê≥ Construindo e iniciando containers..." -ForegroundColor Cyan
docker-compose up -d --build

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Containers iniciados com sucesso" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao iniciar containers" -ForegroundColor Red
    Read-Host "Pressione Enter para sair"
    exit 1
}

# Aguardar o banco de dados inicializar
Write-Host "‚è≥ Aguardando banco de dados inicializar..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Executar migra√ß√µes e seeders
Write-Host "üóÑÔ∏è Executando migra√ß√µes e seeders..." -ForegroundColor Cyan
docker-compose exec -T api php artisan migrate --seed

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao executar migra√ß√µes. Tentando novamente em 10 segundos..." -ForegroundColor Red
    Start-Sleep -Seconds 10
    docker-compose exec -T api php artisan migrate --seed
}

# Gerar chave da aplica√ß√£o
Write-Host "üîë Gerando chave da aplica√ß√£o..." -ForegroundColor Cyan
docker-compose exec -T api php artisan key:generate

# Verificar se os servi√ßos est√£o rodando
Write-Host "üîç Verificando servi√ßos..." -ForegroundColor Cyan

try {
    $response = Invoke-WebRequest -Uri "http://localhost:8000" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "‚úÖ API rodando em http://localhost:8000" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è API pode n√£o estar respondendo ainda" -ForegroundColor Yellow
}

try {
    $response = Invoke-WebRequest -Uri "http://localhost:8080" -TimeoutSec 5 -ErrorAction Stop
    Write-Host "‚úÖ Frontend rodando em http://localhost:8080" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è Frontend pode n√£o estar respondendo ainda" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ Setup conclu√≠do com sucesso!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Informa√ß√µes de acesso:" -ForegroundColor Cyan
Write-Host "   Frontend: http://localhost:8080" -ForegroundColor White
Write-Host "   API: http://localhost:8000" -ForegroundColor White
Write-Host "   MailHog: http://localhost:8025" -ForegroundColor White
Write-Host ""
Write-Host "üë§ Usu√°rios padr√£o:" -ForegroundColor Cyan
Write-Host "   Admin: admin@example.com / password" -ForegroundColor White
Write-Host "   User: user@example.com / password" -ForegroundColor White
Write-Host ""
Write-Host "üìö Comandos √∫teis:" -ForegroundColor Cyan
Write-Host "   Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   Parar: docker-compose down" -ForegroundColor White
Write-Host "   Reiniciar: docker-compose restart" -ForegroundColor White
Write-Host ""
Write-Host "üöÄ Acesse http://localhost:8080 para come√ßar!" -ForegroundColor Green

Read-Host "Pressione Enter para continuar"
